name: Deploy to Production Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  # Backend paths
  BACKEND_JAR_PATH: build/libs/
  JAR_FILENAME: mywiki.jar
  REMOTE_BACKEND_PATH: "~/mywiki/backend"

  # Frontend paths
  FRONTEND_SRC_PATH: ./frontend
  FRONTEND_BUILD_PATH: frontend/build
  REMOTE_FRONTEND_PATH: "~/mywiki/frontend"

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run Backend Tests
        run: ./gradlew test

      - name: Build Backend JAR
        run: ./gradlew bootJar

      - name: Create backend .env file
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "OAUTH2_REDIRECT_URI=${{ vars.OAUTH2_REDIRECT_URI }}" >> .env
          echo "CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}" >> .env

      - name: SCP JAR file
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_SECRET }}
          source: "${{ env.BACKEND_JAR_PATH }}${{ env.JAR_FILENAME }}"
          target: "${{ env.REMOTE_BACKEND_PATH }}"
          strip_components: 2
          overwrite: true

      - name: SCP .env file
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_SECRET }}
          source: ".env"
          target: "${{ env.REMOTE_BACKEND_PATH }}"
          overwrite: true

      - name: Execute remote deploy script
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_SECRET }}
          script: |
            cd ${{ env.REMOTE_BACKEND_PATH }}
            echo "Stopping existing application..."
            # PID 파일이 있으면, 해당 파일의 PID를 읽어 프로세스를 종료합니다.
            if [ -f ./mywiki.pid ]; then
                kill -15 $(cat ./mywiki.pid) || true
                rm ./mywiki.pid
                sleep 5
            fi
            
            echo "Starting new application..."
            set -o allexport; source .env; set +o allexport
            # 새 애플리케이션을 백그라운드로 실행하고, 프로세스 ID를 app.pid 파일에 저장합니다.
            nohup java -jar ${{ env.JAR_FILENAME }} > app.log 2>&1 & echo $! > ./mywiki.pid

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js 18
        uses: actions/setup-node@v5
        with:
          node-version: 18

      - name: Create .env.production file
        working-directory: ${{ env.FRONTEND_SRC_PATH }}
        run: |
          echo "REACT_APP_API_BASE_URL=" > .env.production

      - name: Install and Build Frontend
        working-directory: ${{ env.FRONTEND_SRC_PATH }}
        run: |
          npm install
          npm run build

      - name: Prepare remote directory
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_SECRET }}
          script: |
            sudo mkdir -p ${{ env.REMOTE_FRONTEND_PATH }}
            sudo chown -R ${{ secrets.SERVER_USERNAME }}:${{ secrets.SERVER_USERNAME }} ${{ env.REMOTE_FRONTEND_PATH }}
            rm -rf ${{ env.REMOTE_FRONTEND_PATH }}/*

      - name: SCP Frontend files
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_SECRET }}
          source: "${{ env.FRONTEND_BUILD_PATH }}/*"
          target: "${{ env.REMOTE_FRONTEND_PATH }}"
          strip_components: 2
